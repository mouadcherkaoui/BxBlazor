@inherits LayoutComponentBase

@using System.Linq
@using System.IO

@inject IJSRuntime jsRuntime
@inject HttpClient http

<div id="root">
    <ShellLayout>
        @Body
    </ShellLayout>
</div>

@code {
    IEnumerable<HeaderNavLink> HeaderNavLinks;
    IEnumerable<SwitcherLink> SwitcherLinks;
    IEnumerable<NavMenuSection> Sections;
    IEnumerable<HeaderAction> HeaderActions;

    protected override async Task OnInitializedAsync()
    {

        // we create an announymous object that will hold the deserialized json to do so
        // we will use an extension method through which we will act on the result

        (new
        {
            Sections = Sections,
            SwitcherLinks = SwitcherLinks,
            HeaderNavLinks = HeaderNavLinks,
            HeaderActions = HeaderActions
        })
        // next step is to deserialize the json to the type of the announymous object
            .pipeTo(anonymousObject =>
                Newtonsoft.Json.JsonConvert.DeserializeAnonymousType(Globals.UIShellStructure, anonymousObject))
        // the we pipe the result to extract the shell structure as IEnumerables             
            .pipeTo(result =>
            {
                Sections = result.Sections;
                HeaderNavLinks = result.HeaderNavLinks;
                SwitcherLinks = result.SwitcherLinks;
                HeaderActions = result.HeaderActions;
            });
        // we can continue f
        //.pipeTo(toFile => {
        //});


        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        await base.OnAfterRenderAsync(firstRender);
    }
}
