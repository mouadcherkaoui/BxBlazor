@page "/components/bx-datatable"
@using blazorwasm.Shared

@inject HttpClient Http
@inject IJSRuntime  js
<main id="main-content" class="bx--content">
    <BxGrid>
        <BxRow>
            <BxCol offset="lg-1" lg="10">
                <h3>BxDataTable</h3>
                <p>This component demonstrates fetching data from the server.</p>
                    <BxDataTableV2 TItem="WeatherForecast" Items="forecastsQueryable()" IsSelectable="true" IsSortable="true">
                        <BatchActionsToolbar>
                            <BxDataTableV2_Toolbar
                                OnPrimaryButtonClick="toolbar_click" 
                                OnSearchCallback="SearchKeyupCallback"/>
                        </BatchActionsToolbar>
                    </BxDataTableV2>
            </BxCol>
        </BxRow>
    </BxGrid>
</main>


@code {
    private WeatherForecast[] forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast")
                .ContinueWith<WeatherForecast[]>(t => t.IsFaulted ? get_forcasts() : null);
    }

    private readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };
    
    WeatherForecast[] get_forcasts()
    {
        Random rng = new Random();
        return Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = DateTime.Now.AddDays(index),
            TemperatureC = rng.Next(-20, 55),
            Summary = Summaries[rng.Next(Summaries.Length)]
        })
        .ToArray();
    }
    
    private IQueryable<WeatherForecast> forecastsQueryable() { 
        return forecasts?.Where(f => f.Summary.ToLower().Contains(searchValue ?? ""))?.AsQueryable(); 
        }
    
    void toolbar_click()
    {

    }

    string searchValue = "";
    async Task SearchKeyupCallback(SearchEventArgs args) {
        if(args.Key == "Enter") 
            await js.InvokeVoidAsync("ShowAlert", args.SearchValue);
        searchValue = args.SearchValue;
        Console.WriteLine(searchValue);
    }
}
